#!/usr/bin/env python3
#
# Usage: gocryptfs-rsync-pretty <ctlsock>
#
# Processes rsync verbose output from `stdin` and decrypts the paths to
# display a readable log.
#

import sys
import re
import subprocess
import json

if len(sys.argv) < 3:
    print('Usage: gocryptfs-rsync-pretty <ctlsock> <encrypted-mount>', file=sys.stderr)
    exit(1)

ctlsock = sys.argv[1]
encrypted_mount = sys.argv[2]

if not encrypted_mount.endswith('/'):
    encrypted_mount += '/'

xray = subprocess.Popen(['gocryptfs-xray', '--decrypt-paths', ctlsock], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)

for line in sys.stdin:
    # Means we reach the end, only stats after
    if line == '\n':
        sys.stdout.write(line)
        break

    # Progress lines, ignore
    if line.startswith('\r'):
        sys.stdout.write(line)
        continue

    # Special case for base directory, ignore early (messes with parsing otherwise)
    if line == './\n':
        sys.stdout.write(line)
        continue

    if line == 'sending incremental file list\n':
        sys.stdout.write(line)
        continue

    if line.startswith('IO error encountered'):
        sys.stdout.write(line)
        continue

    # See <http://www.staroceans.org/e-book/understanding-the-output-of-rsync-itemize-changes.html>
    if line[0] in ['<', '>', '*', '.'] or (line[0] in ['c', 'h'] and line[3] in ['.', '+']):
        # Info mode, file is the second part of the line
        file = re.split(r'\s+', line)[1]
    elif line.startswith('skipping non-regular file'):
        # File is between quotes
        file = line.split('"')[1]
    elif line.startswith('rsync: [') and 'failed:' in line:
        # File is between quotes and absolute from encrypted mount
        file = line.split('"')[1]

        if file.startswith(encrypted_mount):
            file = file[len(encrypted_mount):]
        else:
            sys.stdout.write(line)
            continue
    elif line.startswith('deleting'):
        # File is the second part of the line
        file = re.split(r'\s+', line)[1]
    else:
        # Regular verbose mode, file is the whole line
        file = line.rstrip()

    # Top-level `gocryptfs.diriv` or `gocryptfs.conf`, ignore
    if file == 'gocryptfs.diriv' or file == 'gocryptfs.conf':
        sys.stdout.write(line)
        continue

    path = file

    if file.endswith('/'):
        path = file.rstrip('/')
    elif file.endswith('/gocryptfs.diriv'):
        path = file[0:-len('/gocryptfs.diriv')]

    # Special case for base directory (info mode)
    if path == '.':
        sys.stdout.write(line)
        continue


    xray.stdin.write(path + '\n')
    xray.stdin.flush()

    decrypted = xray.stdout.readline().rstrip()

    if file.endswith('/'):
        decrypted += '/'
    elif file.endswith('/gocryptfs.diriv'):
        decrypted += '/gocryptfs.diriv'

    sys.stdout.write(line.replace(file, decrypted))

# Print the rest as is
for line in sys.stdin:
    sys.stdout.write(line)

xray.terminate()
